import requests
from bs4 import BeautifulSoup
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import NavSatFix

class GPSNode(Node):
    def __init__(self):
        super().__init__('GPS_publisher')
        self.coords_publisher = self.create_publisher(NavSatFix, '/nav/raw/fix', 10)

        self.modem_url = "http://192.168.13.31:9191/"
        self.username = "user"
        self.password = "truHirv3"
        self.session = requests.Session()

        if not self.login():
            self.get_logger().error("Login failed. Shutting down node.")
            self.destroy_node()
        else:
            self.start_timer()

    def login(self):
        try:
            self.get_logger().info("Starting login process")
            response = self.session.get(self.modem_url)
            soup = BeautifulSoup(response.text, 'html.parser')

            login_form = soup.find('form', {'id': 'Log In'})
            if not login_form:
                self.get_logger().error("Login form not found")
                return False

            login_url = self.modem_url + login_form.get('action', '')
            login_data = {
                'User Name': self.username,
                'Password': self.password
            }

            response = self.session.post(login_url, data=login_data)
            if 'Login successful' in response.text:
                self.get_logger().info("Login successful")
                return True
            else:
                self.get_logger().error("Login failed")
                return False

        except Exception as e:
            self.get_logger().error(f"Login error: {e}")
            return False

    def start_timer(self):
        timer_period = 1.0  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.get_logger().info("Timer started for GPS data retrieval")

    def timer_callback(self):
        try:
            if not self.session_active():
                self.get_logger().error("Session inactive. Attempting to log in again.")
                if not self.login():
                    self.get_logger().error("Re-login failed. Stopping data fetch.")
                    return

            response = self.session.get(self.modem_url + "#location")
            soup = BeautifulSoup(response.text, 'html.parser')

            raw_message = self.extract_gps_message(soup)
            extracted_data = self.parse_gps_message(raw_message)

            if not extracted_data:
                self.get_logger().warn("No valid GPS data to publish.")
                return

            latitude, longitude, status = extracted_data
            if status != 1:  # Assuming status code 1 means GPS fix acquired
                self.get_logger().info(f"GPS not fixed yet. Status code: {status}")
                return

            coords_msg = NavSatFix()
            coords_msg.header.frame_id = 'GPS_coords'
            coords_msg.header.stamp = self.get_clock().now().to_msg()
            coords_msg.latitude = latitude
            coords_msg.longitude = longitude
            self.coords_publisher.publish(coords_msg)
            self.get_logger().info(f"Published NavSatFix message with latitude: {latitude}, longitude: {longitude}")

        except Exception as e:
            self.get_logger().error(f"Error fetching GPS data: {e}")
            self.login()  # Retry login if there's an error

    def session_active(self):
        try:
            response = self.session.get(self.modem_url)
            return 'Login' not in response.text
        except:
            return False

    def extract_gps_message(self, soup):
        try:
            latitude = self.extract_value(soup, "Latitude")
            longitude = self.extract_value(soup, "Longitude")
            status = self.extract_value(soup, "Status Code")
            return f"{latitude},{longitude},{status}"
        except Exception as e:
            self.get_logger().error(f"Error extracting GPS message: {e}")
            return ""

    def parse_gps_message(self, raw_message):
        try:
            data_parts = raw_message.split(',')
            if len(data_parts) < 3:
                raise ValueError("Incomplete GPS data")

            latitude = float(data_parts[0]) if data_parts[0] else None
            longitude = float(data_parts[1]) if data_parts[1] else None
            status = int(data_parts[2])

            if latitude is None or longitude is None:
                raise ValueError("Missing latitude or longitude data")

            return [latitude, longitude, status]

        except ValueError as e:
            self.get_logger().error(f"BAD MSG: Could not convert data to float - {e}")
            return []

    def extract_value(self, soup, field_name):
        field = soup.find('td', text=field_name)
        if field and field.find_next('td'):
            return field.find_next('td').text.strip()
        return None

def main(args=None):
    rclpy.init(args=args)
    gps_publisher = GPSNode()
    rclpy.spin(gps_publisher)
    gps_publisher.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()